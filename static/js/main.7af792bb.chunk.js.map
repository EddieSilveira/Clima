{"version":3,"sources":["App.js","index.js"],"names":["App","useState","cidade","setCidade","clima","setClima","obtendoClima","setObtendoClima","erro","setErro","erroGeo","setErroGeo","a","process","urlClima","fetch","then","response","json","data","cod","catch","error","console","message","useEffect","apigeo","latitude","longitude","url","results","components","city","country","navigator","geolocation","getCurrentPosition","position","obtemCidade","coords","code","Navbar","bg","Brand","href","Nav","className","Link","Form","inline","FormControl","type","value","placeholder","onChange","event","target","Button","variant","onClick","obtemClima","disabled","length","Spinner","size","animation","Jumbotron","Alert","onClose","dismissible","Heading","codigo","texto","Toast","delay","autohide","Header","Body","Row","Card","name","main","temp","temp_min","temp_max","Img","src","weather","icon","title","description","Title","Footer","Date","dt","toLocaleString","timeZone","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7af792bb.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Card from 'react-bootstrap/Card';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Toast from 'react-bootstrap/Toast';\nimport Alert from 'react-bootstrap/Alert';\n\nimport {\n  FaCloudversify,\n  FaCloudRain,\n  FaArrowDown,\n  FaArrowUp,\n} from 'react-icons/fa';\n\nfunction App() {\n  const [cidade, setCidade] = useState('');\n  const [clima, setClima] = useState(null);\n  const [obtendoClima, setObtendoClima] = useState(false);\n  const [erro, setErro] = useState(null);\n  const [erroGeo, setErroGeo] = useState(null);\n\n  const listaErrosGeo = [\n    {\n      codigo: 1,\n      texto:\n        'N√£o foi dada a permiss√£o para o sistema encontrar a sua localiza√ß√£o',\n    },\n    { codigo: 2, texto: 'N√£o foi poss√≠vel obter a sua localiza√ß√£o' },\n    { codigo: 3, texto: 'O tempo para obter a sua localiza√ß√£o foi expirado!' },\n  ];\n\n  useEffect(() => {\n    const apigeo = process.env.REACT_APP_APIGEO;\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          obtemCidade(position.coords.latitude, position.coords.longitude);\n        },\n        (error) => {\n          setErroGeo(error.code);\n        },\n      );\n    }\n\n    async function obtemCidade(latitude, longitude) {\n      let url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${apigeo}`;\n      await fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n          // console.log(data);\n          setCidade(\n            data.results[0].components.city +\n              ', ' +\n              data.results[0].components.country,\n          );\n        })\n        .catch(function (error) {\n          console.error(\n            `N√£o foi poss√≠vel buscar a cidade a partir da lat/long. Erro: ${error.message}`,\n          );\n        });\n    }\n  }, []);\n\n  async function obtemClima(cidade) {\n    setObtendoClima(true);\n    const apiWeather = process.env.REACT_APP_APIWEATHER;\n    let urlClima = `http://api.openweathermap.org/data/2.5/weather?q=${cidade}&lang=pt&units=metric&appid=${apiWeather}`;\n    await fetch(urlClima)\n      .then((response) => response.json())\n      .then((data) => {\n        switch (data.cod) {\n          case '401':\n            setErro('A API Key informada √© inv√°lida!');\n            setClima(null);\n            break;\n          case '404':\n            setErro('A cidade informada n√£o existe');\n            setClima(null);\n            setCidade('');\n            break;\n          case '429':\n            setErro(\n              'O uso gratuito da API foi excedido! (60 chamadas por minuto)',\n            );\n            setClima(null);\n            break;\n          default:\n            setClima(data);\n        }\n      })\n      .catch(function (error) {\n        console.error(`Erro ao obter o clima: ${error.message}`);\n      });\n    setObtendoClima(false);\n  }\n\n  return (\n    <>\n      {' '}\n      {/*React Fragment*/}\n      <Navbar bg=\"primary\">\n        <Navbar.Brand href=\"#inicio\">FateClima</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#inicio\">In√≠cio</Nav.Link>\n          <Nav.Link href=\"#contato\">Contato</Nav.Link>\n        </Nav>\n        <Form inline>\n          <FormControl\n            type=\"text\"\n            value={cidade}\n            placeholder=\"Informe a cidade...\"\n            onChange={(event) => setCidade(event.target.value)}\n          />\n          &nbsp;\n          <Button\n            variant=\"secondary\"\n            onClick={() => obtemClima(cidade)}\n            disabled={cidade.length < 3}\n          >\n            {obtendoClima ? (\n              <Spinner size=\"sm\" animation=\"grow\" variant=\"light\" />\n            ) : (\n              <FaCloudversify />\n            )}\n            Obter Clima\n          </Button>\n        </Form>\n      </Navbar>\n      <Jumbotron>\n        <h1>\n          <FaCloudRain />\n          FateClima\n        </h1>\n        <p>\n          Consulte o clima de qualquer cidade do mundo. <br></br>\n          App desenvolvido em ReactJS e integrado com a API OpenWeatherMap.\n        </p>\n      </Jumbotron>\n      {erroGeo && (\n        <Alert variant=\"danger\" onClose={() => setErroGeo(null)} dismissible>\n          <Alert.Heading>\n            Ops! Ocorreu um erro ao obter a sua localiza√ß√£o.\n          </Alert.Heading>\n          <p>{listaErrosGeo[erroGeo].texto}</p>\n        </Alert>\n      )}\n      {erro && (\n        <Toast\n          onClose={() => setErro(null)}\n          delay={4000}\n          autohide\n          className=\"bg-danger\"\n        >\n          <Toast.Header>\n            <strong className=\"mr-auto\">{erro}</strong>\n            <small>üò•</small>\n          </Toast.Header>\n          <Toast.Body className=\"bg-white text-danger\">\n            Por favor, fa√ßa uma nova busca.\n          </Toast.Body>\n        </Toast>\n      )}\n      {obtendoClima && (\n        <Row className=\"justify-content-center\">\n          <Spinner animation=\"border\" variant=\"primary\" />\n        </Row>\n      )}\n      <Row className=\"justify-content-center\">\n        {clima && (\n          <Card bg=\"primary\" className=\"text-center\">\n            <Card.Header>\n              <h2>{clima.name}</h2>\n              <h3>\n                <strong>{clima.main.temp}</strong>&#x2103;\n              </h3>\n              <h5>\n                min: <strong>{clima.main.temp_min}</strong>&#x2103;\n                <FaArrowDown className=\"text-danger\" /> - m√°x:{' '}\n                <strong>{clima.main.temp_max}</strong>\n                &#x2103;\n                <FaArrowUp className=\"text-success\" />\n              </h5>\n            </Card.Header>\n            <Card.Body className=\"bg-white\">\n              <Card.Img\n                src={`http://openweathermap.org/img/wn/${clima.weather[0].icon}@4x.png`}\n                title={clima.weather[0].description}\n              />\n              <Card.Title className=\"text-dark\">\n                {clima.weather[0].description}\n              </Card.Title>\n            </Card.Body>\n            <Card.Footer className=\"text-white\">\n              Atualizado em:\n              {new Date(clima.dt * 1000).toLocaleString('pt-BR', {\n                timeZone: 'America/Sao_Paulo',\n              })}\n            </Card.Footer>\n          </Card>\n        )}\n      </Row>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}